// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: two-phase-commit.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoPhaseCommitServerClient is the client API for TwoPhaseCommitServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoPhaseCommitServerClient interface {
	GetLock(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*IsSuccessful, error)
	Commit(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*IsSuccessful, error)
	Abort(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*IsSuccessful, error)
}

type twoPhaseCommitServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoPhaseCommitServerClient(cc grpc.ClientConnInterface) TwoPhaseCommitServerClient {
	return &twoPhaseCommitServerClient{cc}
}

func (c *twoPhaseCommitServerClient) GetLock(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*IsSuccessful, error) {
	out := new(IsSuccessful)
	err := c.cc.Invoke(ctx, "/Server.TwoPhaseCommitServer/GetLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServerClient) Commit(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*IsSuccessful, error) {
	out := new(IsSuccessful)
	err := c.cc.Invoke(ctx, "/Server.TwoPhaseCommitServer/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoPhaseCommitServerClient) Abort(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*IsSuccessful, error) {
	out := new(IsSuccessful)
	err := c.cc.Invoke(ctx, "/Server.TwoPhaseCommitServer/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoPhaseCommitServerServer is the server API for TwoPhaseCommitServer service.
// All implementations must embed UnimplementedTwoPhaseCommitServerServer
// for forward compatibility
type TwoPhaseCommitServerServer interface {
	GetLock(context.Context, *Payment) (*IsSuccessful, error)
	Commit(context.Context, *PaymentID) (*IsSuccessful, error)
	Abort(context.Context, *PaymentID) (*IsSuccessful, error)
	mustEmbedUnimplementedTwoPhaseCommitServerServer()
}

// UnimplementedTwoPhaseCommitServerServer must be embedded to have forward compatible implementations.
type UnimplementedTwoPhaseCommitServerServer struct {
}

func (UnimplementedTwoPhaseCommitServerServer) GetLock(context.Context, *Payment) (*IsSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedTwoPhaseCommitServerServer) Commit(context.Context, *PaymentID) (*IsSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTwoPhaseCommitServerServer) Abort(context.Context, *PaymentID) (*IsSuccessful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedTwoPhaseCommitServerServer) mustEmbedUnimplementedTwoPhaseCommitServerServer() {}

// UnsafeTwoPhaseCommitServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoPhaseCommitServerServer will
// result in compilation errors.
type UnsafeTwoPhaseCommitServerServer interface {
	mustEmbedUnimplementedTwoPhaseCommitServerServer()
}

func RegisterTwoPhaseCommitServerServer(s grpc.ServiceRegistrar, srv TwoPhaseCommitServerServer) {
	s.RegisterService(&TwoPhaseCommitServer_ServiceDesc, srv)
}

func _TwoPhaseCommitServer_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServerServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server.TwoPhaseCommitServer/GetLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServerServer).GetLock(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server.TwoPhaseCommitServer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServerServer).Commit(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoPhaseCommitServer_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoPhaseCommitServerServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server.TwoPhaseCommitServer/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoPhaseCommitServerServer).Abort(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoPhaseCommitServer_ServiceDesc is the grpc.ServiceDesc for TwoPhaseCommitServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoPhaseCommitServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Server.TwoPhaseCommitServer",
	HandlerType: (*TwoPhaseCommitServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLock",
			Handler:    _TwoPhaseCommitServer_GetLock_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TwoPhaseCommitServer_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _TwoPhaseCommitServer_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "two-phase-commit.proto",
}
